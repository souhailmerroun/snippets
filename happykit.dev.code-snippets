{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	"happykit.dev setup": {
		"prefix": "happykit.dev setup",
		"body": [
			"echo \"import type { Configuration } from '@happykit/flags/config';",
			"",
			"// You can replace this with your exact flag types",
			"export type AppFlags = { [key: string]: boolean | number | string | null };",
			"",
			"export const config: Configuration<AppFlags> = {",
			"  envKey: process.env.NEXT_PUBLIC_FLAGS_ENVIRONMENT_KEY!,",
			"",
			"  // You can provide defaults flag values here",
			"  defaultFlags: {},",
			"};\" > flags/config.ts",
			"",
			"echo \"import {",
			"  createUseFlags,",
			"  type InitialFlagState as GenericInitialFlagState,",
			"} from '@happykit/flags/client';",
			"import { createUseFlagBag } from '@happykit/flags/context';",
			"import { type AppFlags, config } from './config';",
			"",
			"export type InitialFlagState = GenericInitialFlagState<AppFlags>;",
			"export const useFlags = createUseFlags<AppFlags>(config);",
			"export const useFlagBag = createUseFlagBag<AppFlags>();\" > flags/client.ts",
			"",
			"echo \"import {",
			"  createGetFlags,",
			"  type GenericEvaluationResponseBody,",
			"} from '@happykit/flags/server';",
			"import { type AppFlags, config } from './config';",
			"",
			"export type EvaluationResponseBody = GenericEvaluationResponseBody<AppFlags>;",
			"export const getFlags = createGetFlags<AppFlags>(config);\" > flags/server.ts",
			"",
			"echo \"import { createGetEdgeFlags } from '@happykit/flags/edge';",
			"import { type AppFlags, config } from './config';",
			"",
			"export const getEdgeFlags = createGetEdgeFlags<AppFlags>(config);\" > flags/edge.ts",
			""
		]
	}
}