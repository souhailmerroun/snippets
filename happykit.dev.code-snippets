{
	"happykit.dev setup": {
		"prefix": "happykit.dev setup",
		"body": [
			"echo \"import type { Configuration } from '@happykit/flags/config';",
			"",
			"// You can replace this with your exact flag types",
			"export type AppFlags = { [key: string]: boolean | number | string | null };",
			"",
			"export const config: Configuration<AppFlags> = {",
			"  envKey: process.env.NEXT_PUBLIC_FLAGS_ENVIRONMENT_KEY!,",
			"",
			"  // You can provide defaults flag values here",
			"  defaultFlags: {},",
			"};\" > flags/config.ts",
			"",
			"echo \"import {",
			"  createUseFlags,",
			"  type InitialFlagState as GenericInitialFlagState,",
			"} from '@happykit/flags/client';",
			"import { createUseFlagBag } from '@happykit/flags/context';",
			"import { type AppFlags, config } from './config';",
			"",
			"export type InitialFlagState = GenericInitialFlagState<AppFlags>;",
			"export const useFlags = createUseFlags<AppFlags>(config);",
			"export const useFlagBag = createUseFlagBag<AppFlags>();\" > flags/client.ts",
			"",
			"echo \"import {",
			"  createGetFlags,",
			"  type GenericEvaluationResponseBody,",
			"} from '@happykit/flags/server';",
			"import { type AppFlags, config } from './config';",
			"",
			"export type EvaluationResponseBody = GenericEvaluationResponseBody<AppFlags>;",
			"export const getFlags = createGetFlags<AppFlags>(config);\" > flags/server.ts",
			"",
			"echo \"import { createGetEdgeFlags } from '@happykit/flags/edge';",
			"import { type AppFlags, config } from './config';",
			"",
			"export const getEdgeFlags = createGetEdgeFlags<AppFlags>(config);\" > flags/edge.ts",
			""
		]
	}
}