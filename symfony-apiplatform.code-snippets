{
    "apiplatform install symfony v3.0.3": {
        "prefix": "apiplatform install symfony v3.0.3",
        "body": [
            "# https://api-platform.com/docs/distribution/#using-symfony-cli",
            "# https://api-platform.com/docs/core/graphql/#graphql-support",
            "# https://api-platform.com/docs/distribution/testing/#creating-data-fixtures",
            "# https://api-platform.com/docs/distribution/testing/#writing-functional-tests",
            "symfony composer require api && echo &&",
            "composer require webonyx/graphql-php && echo &&", 
            "composer require maker --dev && echo &&",
            "composer require alice --dev && echo &&",
            "composer require symfony/test-pack symfony/http-client justinrainbow/json-schema --dev",
            "",
            ".env > DATABASE_URL='sqlite:///%kernel.project_dir%/var/data.db'",
            "symfony console doctrine:database:create",
            "symfony console doctrine:schema:create",
            "",
            "symfony server:start"
        ]
    },
    "apiplatform make entity": {
        "prefix": "apiplatform make entity",
        "body": [
            "php bin/console make:entity --api-resource Book",
            "  title:string",
            "  description:text",
            "",
            "echo \"App\\Entity\\Book:",
            "\tbook_{1..100}:",
            "\t\ttitle: <sentence(4)>",
            "\t\tdescription: <text()>\" >> fixtures/books.yaml",
            "",
            "php bin/console make:migration && echo &&",
            "php bin/console doctrine:migrations:migrate && echo &&",
            "php bin/console hautelook:fixtures:load && echo &&",
            "symfony server:start",
            "",
            "apiplatform unit test BooksTest"
        ]
    },
    "apiplatform unit test BooksTest": {
        "prefix": "apiplatform unit test BooksTest",
        "body": [
            "<?php",
            "",
            "namespace App\\Tests;",
            "",
            "use ApiPlatform\\Symfony\\Bundle\\Test\\ApiTestCase;",
            "use App\\Entity\\Book;",
            "use Hautelook\\AliceBundle\\PhpUnit\\RefreshDatabaseTrait;",
            "",
            "class BooksTest extends ApiTestCase",
            "{",
            "\t// This trait provided by AliceBundle will take care of refreshing the database content to a known state before each test",
            "\tuse RefreshDatabaseTrait;",
            "",
            "\tpublic function testGetCollection(): void",
            "\t{",
            "\t\t// The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`",
            "\t\t\\$response = static::createClient()->request('GET', '/api/books');",
            "",
            "\t\t\\$this->assertResponseIsSuccessful();",
            "\t\t// Asserts that the returned content type is JSON-LD (the default)",
            "\t\t\\$this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');",
            "",
            "\t\t// Asserts that the returned JSON is a superset of this one",
            "\t\t\\$this->assertJsonContains([",
            "\t\t\t'@context' => '/api/contexts/Book',",
            "\t\t\t'@id' => '/api/books',",
            "\t\t\t'@type' => 'hydra:Collection',",
            "\t\t\t'hydra:totalItems' => 100,",
            "\t\t\t'hydra:view' => [",
            "\t\t\t\t'@id' => '/api/books?page=1',",
            "\t\t\t\t'@type' => 'hydra:PartialCollectionView',",
            "\t\t\t\t'hydra:first' => '/api/books?page=1',",
            "\t\t\t\t'hydra:last' => '/api/books?page=4',",
            "\t\t\t\t'hydra:next' => '/api/books?page=2',",
            "\t\t\t],",
            "\t\t]);",
            "",
            "\t\t// Because test fixtures are automatically loaded between each test, you can assert on them",
            "\t\t\\$this->assertCount(30, \\$response->toArray()['hydra:member']);",
            "",
            "\t\t// Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform",
            "\t\t// This generated JSON Schema is also used in the OpenAPI spec!",
            "\t\t\\$this->assertMatchesResourceCollectionJsonSchema(Book::class);",
            "\t}",
            "",
            "\tpublic function testCreateBook(): void",
            "\t{",
            "\t\t\\$response = static::createClient()->request('POST', '/api/books', ['json' => [",
            "\t\t\t'title' => 'The Handmaid\\'s Tale',",
            "\t\t\t'description' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\\'s devastating irony, wit and astute perception.'",
            "\t\t]]);",
            "",
            "\t\t\\$this->assertResponseStatusCodeSame(201);",
            "\t\t\\$this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');",
            "\t\t\\$this->assertJsonContains([",
            "\t\t\t'@context' => '/api/contexts/Book',",
            "\t\t\t'@type' => 'Book',",
            "\t\t\t'title' => 'The Handmaid\\'s Tale',",
            "\t\t\t'description' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\\'s devastating irony, wit and astute perception.'",
            "\t\t]);",
            "\t\t\\$this->assertMatchesRegularExpression('~^/api/books/\\d+\\$~', \\$response->toArray()['@id']);",
            "\t\t\\$this->assertMatchesResourceItemJsonSchema(Book::class);",
            "\t}",
            "",
            "\t/*public function testUpdateBook(): void",
            "\t{",
            "\t\t\\$client = static::createClient();",
            "\t\t// findIriBy allows to retrieve the IRI of an item by searching for some of its properties.",
            "\t\t// ISBN 9786644879585 has been generated by Alice when loading test fixtures.",
            "\t\t// Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.",
            "\t\t\\$iri = \\$this->findIriBy(Book::class, ['isbn' => '9781344037075']);",
            "",
            "\t\t\\$client->request('PUT', \\$iri, ['json' => [",
            "\t\t\t'title' => 'updated title',",
            "\t\t]]);",
            "",
            "\t\t\\$this->assertResponseIsSuccessful();",
            "\t\t\\$this->assertJsonContains([",
            "\t\t\t'@id' => \\$iri,",
            "\t\t\t'isbn' => '9781344037075',",
            "\t\t\t'title' => 'updated title',",
            "\t\t]);",
            "\t}*/",
            "",
            "\t/*public function testDeleteBook(): void",
            "\t{",
            "\t\t\\$client = static::createClient();",
            "\t\t\\$iri = \\$this->findIriBy(Book::class, ['isbn' => '9781344037075']);",
            "",
            "\t\t\\$client->request('DELETE', \\$iri);",
            "",
            "\t\t\\$this->assertResponseStatusCodeSame(204);",
            "\t\t\\$this->assertNull(",
            "\t\t\t// Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...",
            "\t\t\tstatic::getContainer()->get('doctrine')->getRepository(Book::class)->findOneBy(['isbn' => '9781344037075'])",
            "\t\t);",
            "\t}*/",
            "}"
        ]
    },
    "apiplatform fixture": {
        "prefix": "apiplatform fixture",
        "body": [
            "# api/fixtures/books.yaml",
            "App\\Entity\\Book:",
            "\tbook_{1..100}:",
            "\t\tisbn: <isbn13()>",
            "\t\ttitle: <sentence(4)>",
            "\t\tdescription: <text()>",
            "\t\tauthor: <name()>",
            "\t\tpublicationDate: <dateTime()>",
            "",
            "# api/fixtures/reviews.yaml",
            "App\\Entity\\Review:",
            "\treview_{1..200}:",
            "\t\trating: <numberBetween(0, 5)>",
            "\t\tbody: <text()>",
            "\t\tauthor: <name()>",
            "\t\tpublicationDate: <dateTime()>",
            "\t\tbook: '@book_*'"
        ]
    },
    "apiplatform generate typescript": {
        "prefix": "apiplatform generate typescript",
        "body": [
            "NODE_TLS_REJECT_UNAUTHORIZED=0 npm init @api-platform/client https://localhost src/typescript-interfaces/ -- --generator typescript"
        ]
    },
	"apiplatform run-sql": {
        "prefix": "apiplatform run-sql",
        "body": [
            "docker compose exec php bin/console dbal:run-sql 'SELECT * FROM tableName'"
        ]
    },
    "apiplatform hellocontroller": {
        "prefix": "apiplatform hellocontroller",
        "body": [
            "<?php",
            "",
            "namespace App\\Controller;",
            "",
            "use Symfony\\Component\\HttpFoundation\\Response;",
            "use Symfony\\Component\\Routing\\Annotation\\Route;",
            "",
            "class HelloWorldController",
            "{",
            "\t/**",
            "\t * @Route(\"/hello\", methods={\"GET\"})",
            "\t */",
            "\tpublic function hello()",
            "\t{",
            "\t\t\\$response = new Response('Hello World');",
            "",
            "\t\treturn \\$response;",
            "\t}",
            "}"
        ]
    },
    "apiplatform install docker v3.0.3": {
        "prefix": "apiplatform install docker v3.0.3",
        "body": [
            "git clone --depth 1 --branch v3.0.3 https://github.com/api-platform/api-platform.git"
        ]
    },
	"apiplatform ngrok": {
        "prefix": "apiplatform ngrok",
        "body": [
            "npm install ngrok -g",
            "ngrok authtoken 2xSw8Fm38fkbKCDVep5tj_JkeESnfKiGJKtdkPZ75B",
            "ngrok http 8000",
            "ngrok http https://localhost --host-header=\"localhost\""
        ]
    },
}